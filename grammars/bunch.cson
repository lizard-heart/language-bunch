# If this is your first time writing a language grammar, check out:
#   - https://flight-manual.atom.io/hacking-atom/sections/creating-a-grammar/

scopeName: 'source.bunch'
name: 'Bunch'
fileTypes: [ 'bunch' ]
limitLineLength: false

patterns: [
  {
    name: 'comment.line.bunch'
    match: '#.*$'
  }
  {
    name: 'comment.line.bunch'
    match: '\\/\\/.*$'
  }
  {
    name: 'comment.line.bunch'
    begin: '\\/\\*'
    beginCaptures:
      0: name: 'comment.line.bunch'
    end: '\\*\\/'
    endCaptures:
      0: name: 'comment.line.bunch'
    patterns: [{ include: '$self' }]
  }
  {
    match: '@|%|\\*'
    name: 'keyword.operator.bunch'
  }
  {
    match: '\\((dnd|dark mode|do not disturb|light mode)( )(on|off)\\)'
    name: 'keyword.command.bunch'
  }
  {
    match: '\\((hide|show)( )(dock|desktop|menu bar)\\)'
    name: 'keyword.command.bunch'
  }
  {
    match: '\\((dock)( )(left|right|bottom)\\)'
    name: 'keyword.command.bunch'
  }
  {
    match: '\\((audio)( )(input|output)(.*?)\\)'
    name: 'keyword.command.bunch'
  }
  {
    match: '\\((notify|display|input source|awake|log|wallpaper)( )(.*?)\\)'
    name: 'keyword.command.bunch'
  }
  {
    match: '\\((screen|dark mode|light mode)\\)'
    name: 'keyword.command.bunch'
  }
  {
    match: '\\"(.*?)\\"'
    name: 'string.bunch'
  }
  {
    match: '---'
    name: 'keyword.yaml.bunch'
  }
  {
    match: '\\w+: '
    name: 'variable.bunch'
  }
  {
    match: '^([^ \t]+)'
    name: 'entity.name.function'
  }
  {
    match: 'AND|OR|NOT|-|='
    name: 'keyword.operator.word.bunch'
  }
]

comments:
  start: '# '
